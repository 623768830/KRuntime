
var VERSION='0.1-alpha'
var AUTHORS='Microsoft'

default Configuration='Release'

use-standard-lifecycle
k-standard-goals

var ROOT = '${Directory.GetCurrentDirectory()}'
var SCRIPTS_DIR = '${Path.Combine(ROOT, "scripts")}'
var BIN_DIR = '${Path.Combine(ROOT, "bin", Configuration)}'
var SDK_ROOT = '${Path.Combine(ROOT, "artifacts", "sdk")}'
var BUILD_DIR2 = '${Path.Combine(ROOT, "artifacts", "build")}'
var TOOLS_DIR = '${Path.Combine(SDK_ROOT, "tools")}'
var TOOLS_BIN_DIR = '${Path.Combine(TOOLS_DIR, "bin")}'
var PACKAGES_DIR = '${Path.Combine(ROOT, "packages")}'
var TEST_RESULTS = '${Path.Combine(ROOT, "TestResults")}'
var SAMPLES_DIR = '${Path.Combine(ROOT, "samples")}'

var FULL_VERSION = '${VERSION + "-" + BuildNumber}'

#solution-compile target='compile'
    var programFilesX86 = '${Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)}'
    var msbuild = '${Path.Combine(programFilesX86, @"MSBuild\12.0\Bin\MSBuild.exe")}'

    @{
        if(!File.Exists(msbuild))
        {
            Log.Warn("msbuild version 12 not found. Please ensure you have the VS 2013 C++ SDK installed.");
            Environment.Exit(1);
        }
        else 
        {
            Exec(msbuild, " KRuntime.sln /p:Configuration=" + Configuration + " /v:quiet"); 
        }
    }

#package-runtime .clean-sdk-dir .copy-bits .tweak-scripts .copy-package-dependencies .copy-coreclr .nuget-pack-runtime target='package'

#verify-package target='verify'
    var helloWorld = '${Path.Combine(SAMPLES_DIR, "HelloWorld")}'
    var kcmd = '${Path.Combine(TEST_RESULTS, "ProjectK", "tools", "k.cmd")}'

    nuget-install package='ProjectK' outputDir='${TEST_RESULTS}' extra='-source ${SDK_ROOT} -ExcludeVersion -pre'

    @{
        Action<string> runWithFramework = framework => {
            try
            {
                Environment.SetEnvironmentVariable("TARGET_FRAMEWORK", framework);

                var commands = new [] { "run", "build", "clean" };
                foreach(var cmd in commands)
                {
                    Exec(kcmd, cmd + " " + helloWorld);
                }
            }
            finally
            {
                Environment.SetEnvironmentVariable("TARGET_FRAMEWORK", null);
            }
        };

        // Default
        runWithFramework(null);
        runWithFramework("k10");
    }

#clean-sdk-dir
    directory delete="${SDK_ROOT}"
    directory create="${SDK_ROOT}"

#copy-bits
    copy sourceDir='${SCRIPTS_DIR}' outputDir='${TOOLS_DIR}' overwrite='${true}'

    copy sourceDir='${BIN_DIR}' outputDir='${TOOLS_BIN_DIR}' include='klr*net45*.dll' overwrite='${true}'
    copy sourceDir='${BIN_DIR}' outputDir='${TOOLS_BIN_DIR}' include='klr*core*.dll' overwrite='${true}'
    copy sourceDir='${BIN_DIR}' outputDir='${TOOLS_BIN_DIR}' include='klr.exe' overwrite='${true}'
    copy sourceDir='${BIN_DIR}' outputDir='${TOOLS_BIN_DIR}' include='klr*config' overwrite='${true}'

    copy sourceDir='${BUILD_DIR2}' outputDir='${TOOLS_BIN_DIR}' include='**/klr.host.dll' overwrite='${true}'
    copy sourceDir='${BUILD_DIR2}' outputDir='${TOOLS_BIN_DIR}' include='**/Microsoft.Net.Runtime.Interfaces.dll' overwrite='${true}'
    copy sourceDir='${BUILD_DIR2}' outputDir='${TOOLS_BIN_DIR}' include='**/Stubs.dll' overwrite='${true}'

    copy sourceDir='${BUILD_DIR2}' outputDir='${TOOLS_DIR}' include='**/Microsoft*.dll' exclude='**/*Interfaces*' overwrite='${true}'

    directory delete='${BUILD_DIR2}'

#tweak-scripts
    @{
        foreach(var file in Files.Include(Path.Combine(TOOLS_DIR, "*.cmd")))
        {
            var script = File.ReadAllText(file)
                             .Replace(@"..\bin\Debug", "bin")
                             .Replace(@"..\src\", "")
                             .Replace(@"=bin\Debug\", "=")
                             .Replace(@"bin\Debug", "");

            File.WriteAllText(file, script);
        }
    }

#copy-package-dependencies
    @{
        var runners = new[] { "Microsoft.Net.Project", "Microsoft.Net.ApplicationHost" };
        var dependentProjects = new [] { "Microsoft.Net.Runtime", "Microsoft.Net.Runtime.Roslyn" };
        var targetFrameworks = new [] { "k10", "net45" };

        var packages = new[] { "Newtonsoft.Json", 
                               "Microsoft.CodeAnalysis", 
                               "Microsoft.CodeAnalysis.CSharp", 
                               "System.Collections.Immutable", 
                               "System.Reflection.Metadata.Ecma335" };

        foreach (var project in runners)
        {
            foreach (var framework in targetFrameworks)
            {
                foreach (var dependentProject in dependentProjects)
                {
                    string source = Path.Combine(TOOLS_DIR, dependentProject, framework, dependentProject + ".dll");
                    string dest = Path.Combine(TOOLS_DIR, project, framework, dependentProject + ".dll");

                    File.Copy(source, dest, true);
                    Log.Info("Copying to " + dest);
                }

                foreach (var package in packages)
                {
                    var packageDir = Directory.GetDirectories(PACKAGES_DIR, package + "*").FirstOrDefault();

                    if(packageDir == null)
                    {
                        Log.Warn("Unable to find resolve " + package);

                        continue;
                    }

                    string[] candidates = null;

                    if(framework == "k10")
                    {
                        candidates = new [] { framework, "netcore45" };
                    }
                    else
                    {
                        candidates = new [] { framework, "net40", "net35", "net20" };
                    }

                    var di = candidates.Select(fmk => new DirectoryInfo(Path.Combine(packageDir, "lib", fmk)))
                                       .FirstOrDefault(d => d.Exists);

                    if(!di.Exists)
                    {
                        Log.Warn("Couldn't find version of " + package + " matching " + framework);
                        continue;
                    }

                    foreach(var fi in di.GetFiles("*.dll"))
                    {
                        string packageFileDest = Path.Combine(TOOLS_DIR, project, framework, fi.Name);
                        File.Copy(fi.FullName, packageFileDest);

                        Log.Info("Copying to " + packageFileDest);
                    }
                }
            }
        }
    }

    directory delete='${Path.Combine(TOOLS_DIR, "Microsoft.Net.Runtime")}'
    directory delete='${Path.Combine(TOOLS_DIR, "Microsoft.Net.Runtime.Roslyn")}'

#copy-coreclr
    @{
        var coreClrPath = Environment.GetEnvironmentVariable("CORECLR_PATH");

        if (String.IsNullOrEmpty(coreClrPath))
        {
            Log.Warn("The environment variable CORECLR_PATH is not set. The core clr not will not be included in this build.");
            Environment.Exit(1);
            return;
        }
    }

    copy sourceDir='${coreClrPath}' outputDir='${SDK_ROOT}' overwrite='${true}'

#nuget-pack-runtime
    copy sourceDir='${ROOT}' outputDir='${SDK_ROOT}' include='ProjectK.nuspec' overwrite='${true}'
    nuget-pack nuspecFile='${Path.Combine(SDK_ROOT, "ProjectK.nuspec")}' packageVersion='${FULL_VERSION}' outputDir='${SDK_ROOT}' extra='-NoPackageAnalysis'


macro name='Exec' program='string' commandline='string'
    exec
