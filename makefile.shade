
var VERSION='0.1'
var FULL_VERSION='0.1'
var AUTHORS='Microsoft'

default Configuration='Release'

use-standard-lifecycle
k-standard-goals

var ROOT = '${Directory.GetCurrentDirectory()}'
var SCRIPTS_DIR = '${Path.Combine(ROOT, "scripts")}'
var BIN_DIR = '${Path.Combine(ROOT, "bin", Configuration)}'
var SDK_ROOT = '${Path.Combine(ROOT, "artifacts", "sdk")}'
var BUILD_DIR2 = '${Path.Combine(ROOT, "artifacts", "build")}'
var TOOLS_DIR = '${Path.Combine(SDK_ROOT, "tools")}'
var TOOLS_BIN_DIR = '${Path.Combine(TOOLS_DIR, "bin")}'
var PACKAGES_DIR = '${Path.Combine(ROOT, "packages")}'

#solution-compile target='compile'
    build projectFile='KRuntime.sln' extra='/v:quiet'

#k-package target='package'
    directory delete="${SDK_ROOT}"
    directory create="${SDK_ROOT}"
    copy sourceDir='${SCRIPTS_DIR}' outputDir='${TOOLS_DIR}' include='*.cmd' overwrite='${true}'
    @{
        foreach(var file in Files.Include(Path.Combine(TOOLS_DIR, "*.cmd")))
        {
            var script = File.ReadAllText(file)
                             .Replace(@"..\bin\Debug", "bin")
                             .Replace(@"..\src\", "")
                             .Replace(@"=bin\Debug\", "=")
                             .Replace(@"bin\Debug", "");

            File.WriteAllText(file, script);
        }
    }

    copy sourceDir='${BIN_DIR}' outputDir='${TOOLS_BIN_DIR}' include='klr*net45*.dll' overwrite='${true}'
    copy sourceDir='${BIN_DIR}' outputDir='${TOOLS_BIN_DIR}' include='klr*core*.dll' overwrite='${true}'
    copy sourceDir='${BIN_DIR}' outputDir='${TOOLS_BIN_DIR}' include='klr.exe' overwrite='${true}'
    copy sourceDir='${BIN_DIR}' outputDir='${TOOLS_BIN_DIR}' include='klr*config' overwrite='${true}'

    copy sourceDir='${BUILD_DIR2}' outputDir='${TOOLS_BIN_DIR}' include='**/klr.host.dll' overwrite='${true}'
    copy sourceDir='${BUILD_DIR2}' outputDir='${TOOLS_BIN_DIR}' include='**/Microsoft.Net.Runtime.Interfaces.dll' overwrite='${true}'
    copy sourceDir='${BUILD_DIR2}' outputDir='${TOOLS_BIN_DIR}' include='**/Stubs.dll' overwrite='${true}'

    copy sourceDir='${BUILD_DIR2}' outputDir='${TOOLS_DIR}' include='**/Microsoft*.dll' exclude='**/*Interfaces*' overwrite='${true}'

    @{    
        var runners = new[] { "Microsoft.Net.Project", "Microsoft.Net.ApplicationHost" };
        var targetFrameworks = new [] { "k10", "net45" };

        var packages = new[] { "Newtonsoft.Json", 
                               "Microsoft.CodeAnalysis", 
                               "Microsoft.CodeAnalysis.CSharp", 
                               "System.Collections.Immutable", 
                               "System.Reflection.Metadata.Ecma335" };

        foreach (var project in runners)
        {
            foreach (var framework in targetFrameworks)
            {
                string source = Path.Combine(SDK_ROOT, "tools", "Microsoft.Net.Runtime", framework, "Microsoft.Net.Runtime.dll");
                string dest = Path.Combine(SDK_ROOT, "tools", project, framework, "Microsoft.Net.Runtime.dll");

                File.Copy(source, dest, true);
                Log.Info("Copying to " + dest);

                foreach (var package in packages)
                {
                    var packageDir = Directory.GetDirectories(PACKAGES_DIR, package + "*").FirstOrDefault();

                    if(packageDir == null)
                    {
                        Log.Warn("Unable to find resolve " + package);

                        continue;
                    }

                    string[] candidates = null;

                    if(framework == "k10")
                    {
                        candidates = new [] { framework, "netcore45" };
                    }
                    else
                    {
                        candidates = new [] { framework, "net40", "net35", "net20" };
                    }

                    var di = candidates.Select(fmk => new DirectoryInfo(Path.Combine(packageDir, "lib", fmk)))
                                       .FirstOrDefault(d => d.Exists);

                    if(!di.Exists)
                    {
                        Log.Warn("Couldn't find version of " + package + " matching " + framework);
                        continue;
                    }

                    foreach(var fi in di.GetFiles("*.dll"))
                    {
                        string packageFileDest = Path.Combine(SDK_ROOT, "tools", project, framework, fi.Name);
                        File.Copy(fi.FullName, packageFileDest);

                        Log.Info("Copying to " + packageFileDest);
                    }
                }
            }
        }
    }

    directory delete='${Path.Combine(SDK_ROOT, "tools", "Microsoft.Net.Runtime")}'